@using NaitonApp.Data;
@using Index = NaitonApp.Pages.Index;
@inject  IJSRuntime JS

@if (userNavTabs.Count > 1 || (userCategories.Count >= 0 && userCategories.Count > 1))
{
    <div class="min-h-[75px] max-h-[@(NavigationMaxWidth)px] navigation-border pt-1 select-none relative" id="nav-bar" @onclick="ToggleNavMenu"
         @onmousedown="(e) => OnDragStarted(e)" @ontouchstart="(e) => OnDragStarted(e)"
         @onmousemove="(e) => OnDragging(e)" @ontouchmove="(e) => OnDragging(e)"
         @onmouseup="() => OnDragEnd()" @ontouchend="() => OnDragEnd()">

        <!-- drag and move zone to min and max height -->
        <div >
            <div id="chevron" class="nav-drag mb-2.5 mx-auto rounded-full" />
        </div>

        @if (userCategories.Count > 1)
        {
            <!-- user categories zone -->
            <div class="hidden relative"
                 hidden="@(!userCategories.Any())" id="user-categories">
                <div class="w-full absolute top-0">
                    <div class="w-[330px] mx-auto flex items-center justify-between">
                        <button class="py-2 px-6 bg-[#F2F3F4] btn-special-border-left @(activeCategoryIndex == 0 ? "opacity-25" : "")"
                        @onclick="() => PreviousCategory()">
                            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24" height="24" viewBox="0 0 24 24">
                                <defs>
                                    <clipPath id="clip-path">
                                        <rect id="Rectangle_1653" data-name="Rectangle 1653" width="24" height="24" fill="#69717e" />
                                    </clipPath>
                                </defs>
                                <g id="Mask_Group_588" data-name="Mask Group 588" clip-path="url(#clip-path)">
                                    <path id="icons8-right_arrow" d="M7.372,6.537a.818.818,0,0,1,.57,1.405L3.884,12H24.273a.818.818,0,1,1,0,1.636H3.884l4.058,4.058a.818.818,0,1,1-1.157,1.157L1.33,13.4a.818.818,0,0,1,0-1.157L6.785,6.785A.818.818,0,0,1,7.372,6.537Z" transform="translate(-1.092 -0.814)" fill="#69717e" />
                                </g>
                            </svg>
                        </button>

                        <p class="text-2xl">@userCategories[activeCategoryIndex]</p>

                        <button class="py-2 px-6 bg-[#F2F3F4] btn-special-border-right @(@userCategories.Count - 1 == activeCategoryIndex ?  "opacity-25" : "" )"
                            @onclick="() => NextCategory()">
                    <svg class="rotate-180" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24" height="24" viewBox="0 0 24 24">
                            <defs>
                                <clipPath id="clip-path">
                                    <rect id="Rectangle_1653" data-name="Rectangle 1653" width="24" height="24" fill="#69717e" />
                                </clipPath>
                            </defs>
                            <g id="Mask_Group_588" data-name="Mask Group 588" clip-path="url(#clip-path)">
                                <path id="icons8-right_arrow" d="M7.372,6.537a.818.818,0,0,1,.57,1.405L3.884,12H24.273a.818.818,0,1,1,0,1.636H3.884l4.058,4.058a.818.818,0,1,1-1.157,1.157L1.33,13.4a.818.818,0,0,1,0-1.157L6.785,6.785A.818.818,0,0,1,7.372,6.537Z" transform="translate(-1.092 -0.814)" fill="#69717e" />
                            </g>
                        </svg>
                    </button>
                    </div>
                </div>
            </div>
        }

        @if (userNavTabs.Count > 1)
        {
            <nav class="pb-4 max-w-[332px] mx-auto">
                <!-- user features pages navigation tabs -->
                <div class="grid grid-cols-4" id="user-nav-tabs">
                    @foreach (var tab in userNavTabs)
                    {
                        <div class="text-center w-[80px] h-[66px] bg-[#F2F3F4] rounded rounded-2 mb-1">
                            <NavLink class="text-sm mx-auto mb-2 text-[#848A93]" href="" Match="NavLinkMatch.All">
                                <img src="@tab.IconPath" width="24" height="24" class="mb-2 mt-2.5 mx-auto" /> 
                                @tab.Name
                            </NavLink>
                        </div>
                    }
                </div>
            </nav>
        }
    </div>
}
@code {
    private bool collapseNavMenu = true;
    private static List<string> userCategories = StaticData.GetUserCategories().Take(StaticData.UsedCategoriesCount ?? StaticData.GetUserCategories().Count).ToList();
    private static List<NavigationTab> userNavTabs = StaticData.GetUserNavigationTabs().Take(StaticData.UsedCategoriesCount ?? StaticData.GetUserNavigationTabs().Count).ToList();

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private int activeCategoryIndex;

    private IJSObjectReference jsModule;

    private int NavigationMaxWidth = GetNavigationMaxWidth();

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void PreviousCategory()
    {
        if (activeCategoryIndex != 0)
            activeCategoryIndex--;
    }

    private void NextCategory()
    {
        if (activeCategoryIndex < userCategories.Count - 1)
            activeCategoryIndex++;
    }

    protected override async Task OnInitializedAsync()
    {
        jsModule = await JS.InvokeAsync<IJSObjectReference>("import", new object[1] { "./scripts/drag.js" });
        await jsModule.InvokeVoidAsync("setUserNavigationsAsMin");

    }

    private async Task OnDragStarted(EventArgs args)
    {
        await jsModule.InvokeVoidAsync("dragStart", new object[] 
        {
            args, 
            GetNavigationMaxWidth(),
            GetNavigationScrollAnimationZone()
        } );
    }

    private async Task OnDragging(EventArgs args)
    {
        await jsModule.InvokeVoidAsync("dragging", args);
    }

    private async Task OnDragEnd()
    {
        await jsModule.InvokeVoidAsync("dragStop");
    }

    private static int GetNavigationMaxWidth()
    {
        int dragzoneWithCategories = userCategories.Count > 1 ? 68 : 20; // 68 px if category have got else 20
        int navigationRows = userNavTabs.Count / 4;
        if (userNavTabs.Count % 4 > 0)
            navigationRows++;

        return dragzoneWithCategories + (navigationRows * 66) + ((navigationRows - 1) * 4) + 16;
    }

    private static int GetNavigationScrollAnimationZone()
    {
        int navigationRows = userNavTabs.Count / 4 - 1;
        if (navigationRows == -1)
            return 4;

        return (navigationRows * 66) + ((navigationRows - 1) * 4) + 16;
    }

    protected override void OnInitialized()
    {
        Index.OnCountsChanged += OnCountChanged;
        base.OnInitialized();
    }

    private void OnCountChanged(object? sender, EventArgs args)
    {
        userCategories = StaticData.GetUserCategories().Take(StaticData.UsedCategoriesCount ?? StaticData.GetUserCategories().Count).ToList();
        userNavTabs = StaticData.GetUserNavigationTabs().Take(StaticData.UsedTabsCount ?? StaticData.GetUserNavigationTabs().Count).ToList();

        StateHasChanged();
    }
}
